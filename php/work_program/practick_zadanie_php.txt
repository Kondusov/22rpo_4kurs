Вот примеры практических заданий для каждого модуля курса.

---

### **Модуль 1: Введение в веб-программирование на PHP**

**Задание: "Личная страница-визитка с динамическим контентом"**

**Цель:** Закрепить основы синтаксиса PHP, работу с переменными и встраивание PHP в HTML.

**Задача:**
Создайте страницу `index.php`, которая будет выводить:
1.  Приветствие: "Добрый день/вечер/утро/ночь" в зависимости от текущего времени суток (используйте функцию `date("H")`).
2.  Блок "О себе", где информация (имя, фамилия, возраст, город) хранится в переменных и выводится с помощью `echo`.
3.  Список ваших увлечений (не менее 3-х), хранящийся в массиве, который выводится с помощью цикла `foreach`.

**Критерии успеха:**
*   Страница корректно отображается в браузере.
*   Приветствие меняется в зависимости от времени.
*   Все данные выводятся из PHP-переменных, а не "зашиты" в HTML.
*   Список увлечений генерируется циклом.

---

### **Модуль 2: Работа с формами и функции**

**Задание: "Калькулятор стоимости заказа с валидацией"**

**Цель:** Научиться обрабатывать данные форм, создавать функции и проводить базовую валидацию.

**Задача:**
Создайте форму `order.php` с полями:
*   **Товар:** выпадающий список (select) с вариантами (например, Футболка - 1000р., Кружка - 500р., Книга - 300р.).
*   **Количество:** числовое поле (number).
*   **Промокод:** текстовое поле (text).

После отправки формы (метод POST) скрипт должен:
1.  Проверить, что все поля заполнены, а количество больше нуля.
2.  Создать функцию `calculateTotal($price, $quantity, $promo)`, которая вычисляет итоговую стоимость. Если введен промокод "SALE10", применить скидку 10%.
3.  Вывести на страницу результат расчета: выбранный товар, количество, стоимость без скидки, размер скидки (если есть) и итоговую сумму.

**Критерии успеха:**
*   Форма корректно отправляет данные.
*   Реализована проверка на пустые поля и корректность количества.
*   Логика расчета вынесена в отдельную функцию.
*   Результат выводится четко и понятно.

---

### **Модуль 3: Основы ООП и регулярные выражения**

**Задание: "Класс для валидации данных пользователя"**

**Цель:** Применить принципы ООП и регулярные выражения для решения практической задачи.

**Задача:**
Создайте класс `Validator` в файле `Validator.php`.
Класс должен содержать следующие методы:
1.  `validateEmail($email)`: проверяет корректность email с помощью регулярного выражения.
2.  `validatePassword($password)`: проверяет, что пароль длиной не менее 8 символов и содержит хотя бы одну цифру и одну заглавную букву (регулярное выражение).
3.  `validateName($name)`: проверяет, что имя состоит только из букв и имеет длину от 2 до 50 символов.

Создайте простую форму регистрации, которая использует этот класс для проверки введенных данных перед условной "регистрацией" (достаточно вывести сообщение "Проверка пройдена" или список ошибок).

**Критерии успеха:**
*   Создан класс с инкапсулированными методами.
*   Методы используют регулярные выражения для проверок.
*   Класс успешно интегрирован с формой и выводит понятные ошибки.

---

### **Модуль 4: Файлы, ошибки, Cookies и Сессии**

**Задание: "Простая корзина для интернет-магазина"**

**Цель:** Реализовать механизм сохранения состояния между страницами с использованием сессий.

**Задача:**
Создайте две страницы:
1.  `catalog.php`: отображает список товаров (массив в коде). У каждого товара есть кнопка "Добавить в корзину".
2.  `cart.php`: отображает содержимое корзины, общую сумму и кнопку "Очистить корзину".

**Логика:**
*   При нажатии "Добавить в корзину" данные о товаре (id, название, цена) добавляются в массив, который хранится в сессии (`$_SESSION['cart']`).
*   На странице `cart.php` выводится список товаров из сессии.
*   Реализуйте возможность очистки корзины (удаление данных из сессии).

**Критерии успеха:**
*   Товары добавляются в корзину без перезагрузки страницы (пока что с перезагрузкой, AJAX будет позже).
*   Состав корзины сохраняется при переходе между страницами сайта.
*   Корзину можно полностью очистить.

---

### **Модуль 5: Взаимодействие с СУБД MySQL**

**Задание: "Система управления списком контактов (Телефонная книга)"**

**Цель:** Закрепить навыки выполнения CRUD-операций с базой данных через PHP.

**Задача:**
1.  Создайте базу данных `phonebook` и таблицу `contacts` с полями: `id`, `name`, `phone`, `email`.
2.  Реализуйте следующие возможности в виде простого интерфейса (одна `index.php` страница):
    *   **Просмотр (Read):** Вывод списка всех контактов в таблице.
    *   **Добавление (Create):** Форма для добавления нового контакта.
    *   **Редактирование (Update):** Возможность изменить данные контакта (например, по нажатию на иконку "карандаш").
    *   **Удаление (Delete):** Удаление контакта с подтверждением.

**Важно:** Для защиты от SQL-инъекций обязательно используйте подготовленные выражения (Prepared Statements).

**Критерии успеха:**
*   Все CRUD-операции работают корректно.
*   Код безопасен (используются подготовленные выражения).
*   Интерфейс интуитивно понятен.

---

### **Модуль 6: AJAX и PHP. Создание динамических интерфейсов**

**Задание: "Добавление комментариев без перезагрузки страницы"**

**Цель:** Научиться обмениваться данными между JavaScript и PHP в фоновом режиме.

**Задача:**
Создайте страницу с формой для добавления комментария (имя пользователя, текст комментария) и областью для вывода существующих комментариев.

**Логика:**
1.  При отправке формы JavaScript (с использованием `Fetch API`) перехватывает событие, предотвращает стандартную отправку и отправляет данные на PHP-скрипт `add_comment.php`.
2.  PHP-скрипт сохраняет комментарий в базу данных.
3.  После успешного сохранения PHP-скрипт возвращает JSON-ответ с данными нового комментария.
4.  JavaScript получает ответ и динамически (через манипуляции с DOM) добавляет новый комментарий в начало списка на странице, без её перезагрузки.

**Критерии успеха:**
*   Отправка формы и добавление комментария происходят без перезагрузки страницы.
*   Новый комментарий сразу появляется в списке.
*   Данные корректно сохраняются в БД.

---

### **Модуль 7: Обзор инструментов: Фреймворки и CMS**

**Задание: "Установка Laravel и развертывание демо-приложения"**

**Цель:** Получить первое практическое знакомство с современным PHP-фреймворком.

**Задача:**
1.  Убедитесь, что у вас установлен Composer.
2.  Создайте новое Laravel-приложение с помощью команды: `composer create-project laravel/laravel my-blog`.
3.  Запустите встроенный сервер: `php artisan serve`.
4.  Откройте приложение в браузере и убедитесь, что стартовая страница Laravel отображается.
5.  (Опционально, для продвинутых) Сгенерируйте новую модель, миграцию и ресурсный контроллер с помощью Artisan-команды для сущности "Article" (статья блога). Изучите сгенерированную структуру MVC.

**Критерии успеха:**
*   Laravel-приложение успешно создано и запущено.
*   Стартовая страница фреймворка отображается в браузере без ошибок.
*   Студент познакомился со структурой папок фреймворка.